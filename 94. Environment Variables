What are Environment Variables?
Environment variables are dynamic values that are part of the operating system’s environment and can be accessed by various 
programs running on the system. They are used to provide configuration settings, system information and other important 
parameters to software applications.

Environment variables are typically defined by the operating system or set by the user. They are stored in a special
data structure maintained by the operating system called the environment block. Each variable has a name and a 
corresponding value, which can be retrieved by programs to access the information they represent.

The main purpose of environment variables is to provide a standardized way for programs to obtain certain 
information without requiring hard-coded values within the code itself. They enable flexibility and portability
of software applications by allowing them to adapt to different environments without the need for recompilation or modification.

For example, some commonly used environment variables include:

PATH: Specifies the directories where the operating system should look for executable files.
HOME: Indicates the user’s home directory.
TEMP or TMP: Specifies the directory where temporary files should be stored.
USER or USERNAME: Represents the username of the currently logged-in user.
OS: Indicates the name of the operating system.

Programs can read the values of these environment variables during runtime. They can also modify or 
create their own environment variables to store specific information required by the application.

Environment variables are particularly useful in scripting and automation, as they provide a convenient way
to pass parameters and configuration settings to scripts without modifying the script itself.


How to manage Environment Variables in Kubernetes?
Managing environment variables effectively in Kubernetes can greatly enhance the management of your applications. 
Here are some practices to manage environment variables within Kubernetes :

Use ConfigMaps and Secrets: Leverage ConfigMaps for non-sensitive configuration data and Secrets for sensitive 
information like credentials or API keys. Separating environment variables from the application configuration
enables easier updates and reduces the risk of exposing sensitive data.

Centralize Configuration: Instead of hardcoding Kubernetes variables in each application’s deployment configuration,
centralize the configuration in ConfigMaps or Secrets. This centralization simplifies management, promotes consistency
and enables easier updates across multiple deployments.

Avoid Sensitive Data in Plain Text: When using Secrets, avoid storing sensitive information as plain text. Instead, 
base64 encode the values to obfuscate them. While base64 encoding is not encryption, it provides a basic level of protection.
For stronger security, consider using tools like Kubernetes Secrets Store CSI Driver or external secret management systems.

Use Descriptive Names: Choose meaningful and descriptive names for your environment variables to ensure clarity and maintainability.
Clear naming conventions make it easier for developers, operators and administrators to understand the purpose and usage of Kubernetes variables.

Version Control Configurations: Store your Kubernetes configurations, including environment variables, in version control systems
like Git. This practice enables versioning, change tracking and collaboration. It ensures that environment variable changes are 
properly documented and reviewed.

******************************************************************************************************************************************
Pratical 1

we will be discussing how to use environment variables in Kubernetes to configure your applications. 
Environment variables allow you to store configuration data separately from your application code, 
making it easier to manage and update your application.

Prerequisites
Before getting started, you will need to have the following:
A Kubernetes cluster up and running
A Docker image of your application


Dockerfile
FROM nginx
Run apt-get update
ENV WORDPRESS_VERSION 4.2.2
ENV WORDPRESS_USER admin
EXPOSE 80

envars.yaml
apiVersion: v1
kind: Pod
metadata:
  name: env-var
  labels:
    purpose: demonstrate-env-var
spec:
  containers:
  - name: env-var-container
    image: wordpress
    env:
    - name: WORDPRESS_VERSION
      value: "5.2.2"
    - name: WORDPRESS_USER
      value: "ubuntu"

Step 1: Build your Docker image by running the following command:
# docker build -t wordpress .

Step 2: Apply your YAML files by running the following command:
# kubectl apply -f <file-name>

Step 3: To see the list of pods, run the following command:
# kubectl get pods

Step 4: To check the logs of a pod, run the following command:
# kubectl logs <pod-name>

Step 5: To print the environment variables of a pod, run the following command:
# kubectl exec <pod-name> -- printenv

Conclusion
By using environment variables in Kubernetes, you can easily configure your applications without having to 
modify your application code. This makes it easier to manage and update your application, and allows you 
to quickly and easily scale your application as needed.

*****************************************************************************************************************
practile 2  Exposing Pod Information to Containers
we will learn how to expose pod information to containers in Kubernetes. We will look at different 
methods of passing information from the pod to the container via environment variables.

fieldref.yaml
apiVersion: v1
kind: Pod
metadata:
  name: dapi-envars
spec:
  containers:
    - name: test-container
      image: registry.k8s.io/busybox
      command: [ "sh", "-c"]
      args:
      - while true; do
          echo -en '\n';
          printenv MY_NODE_NAME MY_POD_NAME MY_POD_NAMESPACE;
          printenv MY_POD_IP MY_POD_SERVICE_ACCOUNT;
          sleep 10;
        done;
      env:
        - name: MY_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
  restartPolicy: Never
***
resourcefieldref.yaml
apiVersion: v1
kind: Pod
metadata:
  name: dapi-envars-resourcefieldref
spec:
  containers:
    - name: test-container
      image: registry.k8s.io/busybox:1.24
      command: [ "sh", "-c"]
      args:
      - while true; do
          echo -en '\n';
          printenv MY_CPU_REQUEST MY_CPU_LIMIT;
          printenv MY_MEM_REQUEST MY_MEM_LIMIT;
          sleep 10;
        done;
      resources:
        requests:
          memory: "32Mi"
          cpu: "125m"
        limits:
          memory: "64Mi"
          cpu: "250m"
      env:
        - name: MY_CPU_REQUEST
          valueFrom:
            resourceFieldRef:
              containerName: test-container
              resource: requests.cpu
        - name: MY_CPU_LIMIT
          valueFrom:
            resourceFieldRef:
              containerName: test-container
              resource: limits.cpu
        - name: MY_MEM_REQUEST
          valueFrom:
            resourceFieldRef:
              containerName: test-container
              resource: requests.memory
        - name: MY_MEM_LIMIT
          valueFrom:
            resourceFieldRef:
              containerName: test-container
              resource: limits.memory
  restartPolicy: Never

To apply YAML files:
# kubectl apply -f <file-name>

To see pods:
# kubectl get pods

To check logs of a pod:
# kubectl logs <pod-name>

To print environment variables of a pod:
# kubectl exec <pod-name> -- printenv

Conclusion
By the end of this video, you should have a better understanding of how to expose pod information to containers in Kubernetes.




