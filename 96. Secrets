What Are Kubernetes Secrets?

A secret in Kubernetes can be defined as an object that contains a small quantity of sensitive data like a password, 
a token, or a key. It contains information that is otherwise stored in a container image or pod specification. 
The main advantage of a secret is that we will not have to include sensitive or confidential data in the application code. 
There is less risk of losing or exposing secrete during the workflow of creating viewing, and editing Pods because they
can be and are created independently of the pods in which they are being used. Secretes can be considered similar to
ConfigMaps but the main difference between them is that they are specially designed to store and hold confidential data.


Types of Kubernetes Secrets
Other than your best friend, there are four other types of Kubernetes secrets that can be used to store and manage sensitive information within a Kubernetes cluster:

1. Opaque Secrets
Opaque secrets are the most basic type of secret in Kubernetes. They can store arbitrary data, such as binary data or text, as key-value pairs.

Opaque secrets are typically used to store sensitive data such as passwords, certificates, and tokens.

2. TLS Secrets
TLS secrets are used to store TLS certificates and private keys. They are used to secure communication between different
services within a Kubernetes cluster, as well as between services and external clients.

3. Dockercfg Secrets
Dockercfg secrets are used to store Docker credentials, such as registry credentials and authentication tokens.

They are used by the Kubernetes container runtime to pull images from private Docker registries.

4. SSH Secrets
SSH secrets are used to store SSH private keys, which can be used to authenticate with other servers or services.
****************************

pratical How to Create, Use, and Manage Secrets in Kubernetes

/secret-1.yaml
apiVersion: v1
kind: Pod
metadata:
  name: secret-demo-1
spec:
  containers:
  - name: demo-container
    image: nginx
    env:
    - name: Username
      valueFrom:   
        secretKeyRef:   
          name: db-secret
          key: username

/secret-2.yaml
apiVersion: v1
kind: Pod
metadata:
  name: secret-demo-2
spec:
  containers:
  - name: demo-container
    image: nginx
    envFrom:
    - secretRef:
       name: docker-secret

/secret-3.yaml
apiVersion: v1
kind: Pod
metadata:
  name: secret-demo-3
spec:
  containers:
  - name: demo-container
    image: nginx
    volumeMounts:
      - name: data
        mountPath: /etc/cert-data
  volumes:
  - name: data
    secret:
      secretName: my-tls-secret


we cover creating and managing different types of secrets, including generic, Docker-registry, and TLS secrets.

To create different types of secrets

Generic Secret
kubectl create secret generic db-secret --from-literal=username=dbuser --from-literal=password=Y4nys7f11

Docker-registry Secret
kubectl create secret docker-registry docker-secret --docker-email=example@gmail.com --docker-username=dev --docker-password=pass1234 --docker-server=my-registry.example:5000

TLS Secret
kubectl create secret tls my-tls-secret --cert=/root/data/serverca.crt --key=/root/data/servercakey.pem

To apply yaml files
kubectl apply -f <file-name.yaml>

To check running pods
kubectl get pods

To check created secrets
kubectl get secret

To describe a secret
kubectl describe secret <secret-name>

To check environment variables in running pod
kubectl exec -it <pod-name> -- printenv

To go inside running pod
kubectl exec -it <pod-name> -- bash

To extract pod's yaml file
kubectl get pod <pod-name> -o yaml

To decode the encrypted data
echo "<data>" | base64 -d

Conclusion
Kubernetes secrets are an important aspect of managing Kubernetes applications. 
They allow you to store sensitive data securely and manage access to that data.
By using the commands and code samples in this repository, you'll be able to easily
create, use, and manage secrets in your Kubernetes applications.





