when you want to launch the newer version from v1 to v2 this concept is called as RollOut, by rolling you we have 100% uptime
  if you want to come back or undo from v3 to v2 this is called RollBack

  It all depend on your strategies how you are going to deploy your PODS , this strategies will deside how much you will require a downtime and uptime
  normally we have five strategies to Deploy
    everyone has its own usecase and depend on requirement to requirement 
  
  1. Ramped (rolling update)
     ruuning you application on pod you want to update as soon as you update with newer version or pod your customer see the update 
      with - no downtimw
           - seamless

    Kubernetes come with two precreate stratregies with it 1. Ramped and 2. Recreate, this are available in kubernetes we can use it in as it is , bydefaut hey use recreate or rolling update stategy


  2.Recreate 
    Delete/terminate the older one and launch new one, (time reqired 1, 2 sec consume)
    whoever guys conneted in older pods they will lose the connection and this is not the good user experience
    means existing customer will face the down time of 2 sec
    this is how recreate strategy works 

    eg., when any security / valunirability bug fixes  come up we have to forcefully delete the older version and launch new one with update version

    - thsi startegy does not give good user experience 
    - down time 


  1. Rolling update( Ramped)
    if you dont want any downtime the you can uses Ramded/ rolling update 
  here kubernetes you some intelligence
     suppose you have 3 replicas and kubernetyes find that one of them is free or any client session is over from that pod they will delete that pod and launch new updated one
     then it will now divert the new upcoming traffic on pod 3 and ass soon as pod 1 or 2 customers session over they will delete and launch the new one 
      here kubernetes not send the trafffic on older version as they are using intillagence they are in processs of update 
  they are keep on removing oneby one and lkaunching one by one 

      - by this there will no downtime 
      - 100% uptime 

Deployment only knows to to use the strategy they dont know the service, pod etc.. 


**************************************************************************************
1. Create a Deployment name my-deploy with image nginx.
2. Scale my-deploy to 3 replicas.
3. Replace the image in my-deploy nginx to nginx:alpine.
4. Scale down to 2 replicas.
5. Rollback to previous version of my-deploy.
6. Delete Deployment, Replica Set and pod created by my-deploy

==>
1 ans*****
C:\Users\MRUNAL\Documents\kubernetes>kubectl create deployment mydeploy --image=nginx
deployment.apps/mydeploy created

C:\Users\MRUNAL\Documents\kubernetes>kubctl get all
'kubctl' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\MRUNAL\Documents\kubernetes>kubectl get all
NAME                            READY   STATUS    RESTARTS   AGE
pod/mydeploy-5588d64c7d-9sx6h   1/1     Running   0          31s

NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
service/kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   97d

NAME                       READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/mydeploy   1/1     1            1           31s

NAME                                  DESIRED   CURRENT   READY   AGE
replicaset.apps/mydeploy-5588d64c7d   1         1         1       31s

C:\Users\MRUNAL\Documents\kubernetes>kubectl get deploy
NAME       READY   UP-TO-DATE   AVAILABLE   AGE
mydeploy   1/1     1            1           72s

C:\Users\MRUNAL\Documents\kubernetes>kubectl get deploy -o wide
NAME       READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES   SELECTOR
mydeploy   1/1     1            1           80s   nginx        nginx    app=mydeploy

C:\Users\MRUNAL\Documents\kubernetes>kubectl rollout history deploy mydeploy
deployment.apps/mydeploy
REVISION  CHANGE-CAUSE
1         <none>


2. ans*****
C:\Users\MRUNAL\Documents\kubernetes>kubectl scale deploy mydeploy --replicas=3
deployment.apps/mydeploy scaled

C:\Users\MRUNAL\Documents\kubernetes>kubectl get pod
NAME                        READY   STATUS    RESTARTS   AGE
mydeploy-5588d64c7d-46msr   1/1     Running   0          19s
mydeploy-5588d64c7d-9sx6h   1/1     Running   0          4m25s
mydeploy-5588d64c7d-cxjxs   1/1     Running   0          19s

3. ans*****

************************************************************************************************************************************
************************************************************************************************************************************
Rolling Back 

when we deploy/Roll out the deployment ex., we are deploying v1 of our application the kubernetes assign the Revision number to that deployment,
similarly when we deploy/RollOut v2 of our application k8s give the 2nd revision numer to our deployment,, this process goes on

but when such sistuation occures you have to goes with previous update the from revision number you can directly go

Rollback a Kubernetes Deployment
This readme file provides step-by-step instructions on how to deploy and manage the Nginx web server using Kubernetes Deployment. 
It also covers the process of rolling back to previous revisions if necessary.

Deployment Creation
To deploy the Nginx web server, follow these steps:

Create a file named nginx-deployment.yaml:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    run: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      run: nginx
  template:
    metadata:
      labels:
        run: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80

Run the following command to deploy the Nginx server using the nginx-deployment.yaml file:
# kubectl apply -f nginx-deployment.yaml --record=true

Checking Deployment Status
To verify the deployment status, execute the following command:
# kubectl get deployment

The output will display information about the deployed Nginx server, including the number of replicas.

Upgrading the Deployment Image
If you need to upgrade the Nginx image in the deployment, follow these steps:

Run the following command to update the image to nginx:1.16.1:
#kubectl set image deployment/nginx-deployment nginx=nginx:1.16.1 --record=true

To check the rollout status, use the following command:
# kubectl rollout status deployment/nginx-deployment

***** Rolling Back a Deployment *****
In case an upgrade causes issues and you need to roll back to a previous version, follow these steps:

Use the command below to view the revision history of the deployment:
# kubectl rollout history deployment/nginx-deployment

To see the details of a specific revision (e.g., revision 2), run the following command:
# kubectl rollout history deployment/nginx-deployment --revision=2

To perform a general rollback to the previous revision, execute the command:
# kubectl rollout undo deployment/nginx-deployment

If you want to rollback directly to a specific revision number (e.g., revision 1), use the following command:
# kubectl rollout undo deployment/nginx-deployment --to-revision=1

To verify the rollback, you can describe the deployment using the command:
# kubectl describe deployment nginx-deployment




















  
