If we launch only one pod then the SPOF can occur 
when we are running same copy in pods then it is   called repica,
with the help of replica we can create a better system design

Vertical Scaling(increasing the ram, cpu of same laptop)   XX    Hrizontal scaling(increasing the no.of laptops)

Load balancing is the service/ program acts as an intermidate program(also knows as Procy program= doing this behalf of you)  between the server and clients
  - means client sending request , that request is collected by Intermidate program,
      and that program will send your req to ser , get back and sent to client 
  - Interdimate program/ proxy porgram will help you in balancing the traffic
  - this program is called as Load Balancer, behind the seen they use Round Robin algorithm in managing the traffic
  - in kubernetes you dont want to worry about the load balancing , just tell them i required LB,
      they will take care by creating the Backend servers, register them with frontend serber(Load Balancer), enore thing they will set for you
      for achieving this they have on kubernetes resource available called service resource (name is service but entire equal to Load Balancer)
      like pod is resource, rc controller is on resource like this we have service,
      kubernetes provide one service to you Cluster IP but this is not useful for us now , we can use this service to create our LB
       # kubectl get service

***************************************************************************************************************************
Their are different types of Service(==Load Balancer) are available 
How to create the service



C:\Users\MRUNAL\Documents\kubernetes>kubectl create -f rc.yml
replicationcontroller/myrc2 created

C:\Users\MRUNAL\Documents\kubernetes>kubectl get pods
NAME          READY   STATUS              RESTARTS   AGE
myrc2-9x5jd   0/1     ContainerCreating   0          8s
myrc2-jmdh5   0/1     ContainerCreating   0          8s
myrc2-k6tgk   1/1     Running             0          8s

C:\Users\MRUNAL\Documents\kubernetes>kubectl scale --replicas=5  rc/myrc2
replicationcontroller/myrc2 scaled

C:\Users\MRUNAL\Documents\kubernetes>kubectl get pods
NAME          READY   STATUS    RESTARTS   AGE
myrc2-8nsww   1/1     Running   0          18s
myrc2-9x5jd   1/1     Running   0          2m45s
myrc2-jmdh5   1/1     Running   0          2m45s
myrc2-k6tgk   1/1     Running   0          2m45s
myrc2-wsft2   1/1     Running   0          18s

C:\Users\MRUNAL\Documents\kubernetes>kubectl expose --type=NodePort  --port=80  rc/myrc2
service/myrc2 exposed

C:\Users\MRUNAL\Documents\kubernetes>kubectl get svc
NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
kubernetes   ClusterIP   10.96.0.1       <none>        443/TCP        21h
myrc2        NodePort    10.110.231.85   <none>        80:32237/TCP   19s

C:\Users\MRUNAL\Documents\kubernetes>kubectl describe svc myrc2
Name:                     myrc2
Namespace:                default
Labels:                   dc=IN
Annotations:              <none>
Selector:                 dc=IN
Type:                     NodePort
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       10.110.231.85
IPs:                      10.110.231.85
Port:                     <unset>  80/TCP
TargetPort:               80/TCP
NodePort:                 <unset>  32237/TCP
Endpoints:                10.244.0.16:80,10.244.0.17:80,10.244.0.18:80 + 2 more...
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>
C:\Users\MRUNAL\Documents\kubernetes>minikube ip
192.168.59.100

http://192.168.59.100:32237/ 

*********************************************************************************************************************************
3 Kind of Load Balancer, theree different kind of services
  1. Cluster IP
  2. Node Port
  3. External load balancer 

# kubectl expose  -h   // expose means you are using some kind of service(i.e., load balancer)


Condition: whenever you run/deploy App on POD , the client can access but some POD get down or crack using RC it can launch new
           but its IP change, so client can not connet to IT
           for this better pratice is you always use the service in between the client and POD, the service IP will be same, 
            and POD will connect to service and service IP will connect to client, always use service.

threee tpesof services(SVC)
  1. Cluster IP
  2. Node Port
  3. LB or Exyernal
which service to use it all depends upon the actual and final requirement


1. Cluster IP - Private(isolated)
  if the scerenio is that you want to deploy your POD and client can acess and the service in Same with subnet, LAB, LAN, i.e., private Ip 
  then here service is used called ClusterIP, means your client needs to connent with same network where the POD aunch, same premises
2.node port
your requirement changes, you want your app want to be access from anywhere from the entire world, this time you want to expose to 
private world + public world here we will you service as NP(node port) 

3. LB or External
when we want more relibility, more aunthocity on any of the form , what we can do we can buy the physical load balancer device
that is knows an Appliance , cliend will go there and LB will send traffic to POD

REAL Hardware or cloud computing -> AWS -> Elastic Load Balancer(ELB)
we can tell to kubernetes, now launch the POD for replication controller(RC) for replica part only but I want to use the ELB load 
balancer of the cloud computing
so any client come up they go to ELB(ver much powerful) and they will send the traffic to POD 
this is the one of the power kubernetes provide to you.


# kubectl delete all --all // every thing is deleted, very dangerous command
************************************************************************************
service_nodeport.yml
apiVersion: v1
kind: Service
metadata:
  name:  mywebservice
spec:
  type:  NodePort
  selector:
    dc:  IN
  ports:
    -  port: 80
       targetPort: 80
       nodePort: 30000
*********************************************************************************

C:\Users\MRUNAL\Documents\kubernetes>kubectl create -f rc.yml
replicationcontroller/myrc1 created

C:\Users\MRUNAL\Documents\kubernetes>kubectl get pods
NAME          READY   STATUS              RESTARTS   AGE
myrc1-8m2gf   0/1     ContainerCreating   0          8s

C:\Users\MRUNAL\Documents\kubernetes>notepad service_nodeport.yml

C:\Users\MRUNAL\Documents\kubernetes>kubectl create -f service_nodeport.yml
service/mywebservice created

C:\Users\MRUNAL\Documents\kubernetes>kubectl get svc
NAME           TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE
kubernetes     ClusterIP   10.96.0.1        <none>        443/TCP        16m
mywebservice   NodePort    10.111.251.205   <none>        80:30000/TCP   14s

C:\Users\MRUNAL\Documents\kubernetes>kubectl describe svc/mywebservice
Name:                     mywebservice
Namespace:                default
Labels:                   <none>
Annotations:              <none>
Selector:                 dc=IN
Type:                     NodePort
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       10.111.251.205
IPs:                      10.111.251.205
Port:                     <unset>  80/TCP
TargetPort:               80/TCP
NodePort:                 <unset>  30000/TCP
Endpoints:                10.244.0.22:80
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>

C:\Users\MRUNAL\Documents\kubernetes>minikube ip
192.168.59.100

C:\Users\MRUNAL\Documents\kubernetes>kubectl scale rc myrc1 --replicas=3
replicationcontroller/myrc1 scaled

C:\Users\MRUNAL\Documents\kubernetes>kubectl get rc
NAME    DESIRED   CURRENT   READY   AGE
myrc1   3         3         3       17m

C:\Users\MRUNAL\Documents\kubernetes>kubectl get pods
NAME          READY   STATUS    RESTARTS   AGE
myrc1-2lf4x   1/1     Running   0          27s
myrc1-8m2gf   1/1     Running   0          17m
myrc1-jwgzg   1/1     Running   0          27s

C:\Users\MRUNAL\Documents\kubernetes>curl 192.168.59.100:30000
<body bgcolor='aqua'>
<pre>

welcome to vimal web server for testingeth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 10.244.0.24  netmask 255.255.0.0  broadcast 10.244.255.255
        ether 5e:fd:46:c1:88:f4  txqueuelen 0  (Ethernet)
        RX packets 4  bytes 299 (299.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 4  bytes 204 (204.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0


</pre>

C:\Users\MRUNAL\Documents\kubernetes>
       
      





      
